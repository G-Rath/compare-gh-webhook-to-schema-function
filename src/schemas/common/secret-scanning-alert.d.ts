/* tslint:disable */
import { User } from '.';
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface SecretScanningAlert {
  /**
   * The security alert number.
   */
  number: number;
  /**
   * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  created_at: string;
  updated_at: string | null;
  /**
   * The REST API URL of the alert resource.
   */
  url: string;
  /**
   * The GitHub URL of the alert resource.
   */
  html_url: string;
  /**
   * The REST API URL of the code locations for this alert.
   */
  locations_url?: string;
  state: 'open' | 'resolved';
  /**
   * **Required when the `state` is `resolved`.** The reason for resolving the alert.
   */
  resolution:
    | 'false_positive'
    | 'wont_fix'
    | 'revoked'
    | 'used_in_tests'
    | null;
  /**
   * The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  resolved_at: string | null;
  resolved_by: User | null;
  /**
   * An optional comment to resolve an alert.
   */
  resolution_comment?: string | null;
  /**
   * The type of secret that secret scanning detected.
   */
  secret_type: string;
  /**
   * User-friendly name for the detected secret, matching the `secret_type`.
   * For a list of built-in patterns, see "[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)."
   */
  secret_type_display_name?: string;
  /**
   * The secret that was detected.
   */
  secret?: string;
  /**
   * Whether push protection was bypassed for the detected secret.
   */
  push_protection_bypassed?: boolean | null;
  push_protection_bypassed_by?: User | null;
  /**
   * The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  push_protection_bypassed_at?: string | null;
}
