/* tslint:disable */
import { License, User } from '.';
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * A git repository
 */
export interface Repository {
  /**
   * Unique identifier of the repository
   */
  id: number;
  /**
   * The GraphQL identifier of the repository.
   */
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  /**
   * The full, globally unique, name of the repository.
   */
  full_name: string;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  owner: User;
  /**
   * The URL to view the repository on GitHub.com.
   */
  html_url: string;
  /**
   * The repository description.
   */
  description: string | null;
  /**
   * Whether the repository is a fork.
   */
  fork: boolean;
  /**
   * The URL to get more information about the repository from the GitHub API.
   */
  url: string;
  /**
   * The API URL to list the forks of the repository.
   */
  forks_url: string;
  /**
   * A template for the API URL to get information about deploy keys on the repository.
   */
  keys_url: string;
  /**
   * A template for the API URL to get information about collaborators of the repository.
   */
  collaborators_url: string;
  /**
   * The API URL to list the teams on the repository.
   */
  teams_url: string;
  /**
   * The API URL to list the hooks on the repository.
   */
  hooks_url: string;
  /**
   * A template for the API URL to get information about issue events on the repository.
   */
  issue_events_url: string;
  /**
   * The API URL to list the events of the repository.
   */
  events_url: string;
  /**
   * A template for the API URL to list the available assignees for issues in the repository.
   */
  assignees_url: string;
  /**
   * A template for the API URL to get information about branches in the repository.
   */
  branches_url: string;
  /**
   * The API URL to get information about tags on the repository.
   */
  tags_url: string;
  /**
   * A template for the API URL to create or retrieve a raw Git blob in the repository.
   */
  blobs_url: string;
  /**
   * A template for the API URL to get information about Git tags of the repository.
   */
  git_tags_url: string;
  /**
   * A template for the API URL to get information about Git refs of the repository.
   */
  git_refs_url: string;
  /**
   * A template for the API URL to create or retrieve a raw Git tree of the repository.
   */
  trees_url: string;
  /**
   * A template for the API URL to get information about statuses of a commit.
   */
  statuses_url: string;
  /**
   * The API URL to get information about the languages of the repository.
   */
  languages_url: string;
  /**
   * The API URL to list the stargazers on the repository.
   */
  stargazers_url: string;
  /**
   * A template for the API URL to list the contributors to the repository.
   */
  contributors_url: string;
  /**
   * The API URL to list the subscribers on the repository.
   */
  subscribers_url: string;
  /**
   * The API URL to subscribe to notifications for this repository.
   */
  subscription_url: string;
  /**
   * A template for the API URL to get information about commits on the repository.
   */
  commits_url: string;
  /**
   * A template for the API URL to get information about Git commits of the repository.
   */
  git_commits_url: string;
  /**
   * A template for the API URL to get information about comments on the repository.
   */
  comments_url: string;
  /**
   * A template for the API URL to get information about issue comments on the repository.
   */
  issue_comment_url: string;
  /**
   * A template for the API URL to get the contents of the repository.
   */
  contents_url: string;
  /**
   * A template for the API URL to compare two commits or refs.
   */
  compare_url: string;
  /**
   * The API URL to merge branches in the repository.
   */
  merges_url: string;
  /**
   * A template for the API URL to download the repository as an archive.
   */
  archive_url: string;
  /**
   * The API URL to list the downloads on the repository.
   */
  downloads_url: string;
  /**
   * A template for the API URL to get information about issues on the repository.
   */
  issues_url: string;
  /**
   * A template for the API URL to get information about pull requests on the repository.
   */
  pulls_url: string;
  /**
   * A template for the API URL to get information about milestones of the repository.
   */
  milestones_url: string;
  /**
   * A template for the API URL to get information about notifications on the repository.
   */
  notifications_url: string;
  /**
   * A template for the API URL to get information about labels of the repository.
   */
  labels_url: string;
  /**
   * A template for the API URL to get information about releases on the repository.
   */
  releases_url: string;
  /**
   * The API URL to list the deployments of the repository.
   */
  deployments_url: string;
  created_at: number | string;
  updated_at: string;
  pushed_at: number | string | null;
  git_url: string;
  ssh_url: string;
  clone_url: string;
  svn_url: string;
  homepage: string | null;
  size: number;
  stargazers_count: number;
  watchers_count: number;
  language: string | null;
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether discussions are enabled.
   */
  has_discussions?: boolean;
  forks_count: number;
  mirror_url: string | null;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository is disabled.
   */
  disabled?: boolean;
  open_issues_count: number;
  license: License | null;
  forks: number;
  open_issues: number;
  watchers: number;
  stargazers?: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge?: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit?: boolean;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge?: boolean;
  /**
   * Whether to allow auto-merge for pull requests.
   */
  allow_auto_merge?: boolean;
  /**
   * Whether to allow private forks
   */
  allow_forking?: boolean;
  allow_update_branch?: boolean;
  use_squash_pr_title_as_default?: boolean;
  squash_merge_commit_message?: string;
  squash_merge_commit_title?: string;
  merge_commit_message?: string;
  merge_commit_title?: string;
  is_template: boolean;
  web_commit_signoff_required: boolean;
  topics: string[];
  visibility: 'public' | 'private' | 'internal';
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge?: boolean;
  master_branch?: string;
  permissions?: {
    pull: boolean;
    push: boolean;
    admin: boolean;
    maintain?: boolean;
    triage?: boolean;
  };
  public?: boolean;
  organization?: string;
}
